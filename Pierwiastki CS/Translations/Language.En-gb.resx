<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="AboutForm" xml:space="preserve">
    <value>About</value>
  </data>
  <data name="AboutForm.lblAppTitle" xml:space="preserve">
    <value>Numerical Calculator</value>
  </data>
  <data name="AboutForm.lblVersion" xml:space="preserve">
    <value>Version</value>
  </data>
  <data name="aboutToolStripMenuItem" xml:space="preserve">
    <value>About</value>
  </data>
  <data name="applicationToolStripMenuItem" xml:space="preserve">
    <value>Application</value>
  </data>
  <data name="btnCompute" xml:space="preserve">
    <value>Compute</value>
  </data>
  <data name="btnDraw" xml:space="preserve">
    <value>Draw</value>
  </data>
  <data name="chkDifferential" xml:space="preserve">
    <value>Differential equation</value>
  </data>
  <data name="chkDifferentialII" xml:space="preserve">
    <value>Differential second-order</value>
  </data>
  <data name="chkFirstDerivative" xml:space="preserve">
    <value>First derivative</value>
  </data>
  <data name="chkFunction" xml:space="preserve">
    <value>Function</value>
  </data>
  <data name="chkRescaling" xml:space="preserve">
    <value>Automatic scaling</value>
  </data>
  <data name="chkSecondDerivative" xml:space="preserve">
    <value>Second derivative</value>
  </data>
  <data name="chkSpecialFunction" xml:space="preserve">
    <value>Special function</value>
  </data>
  <data name="closeToolStripMenuItem" xml:space="preserve">
    <value>Close</value>
  </data>
  <data name="extraComputationsToolStripMenuItem" xml:space="preserve">
    <value>Extra computations</value>
  </data>
  <data name="fileToolStripMenuItem" xml:space="preserve">
    <value>File</value>
  </data>
  <data name="FunctionForm" xml:space="preserve">
    <value>Functions</value>
  </data>
  <data name="FunctionForm.lblBody" xml:space="preserve">
    <value>Sine = sin
Hyperbolic sine = sinh
Cosine = cos
Hyperbolic cosine = cosh
Tangent = tg, tan
Hyperbolic tangent = tgh, tanh
Cotangent = ctg, ctn, cot
Hyperbolic cotangent = ctgh, ctnh, coth
Secant = sec
Cosecant = csc
Arcsine = asin
Arccosine = acos
Arctangent = atg
Arccotangent = actg
Exponential function with e base = exp
Square root = sqrt
Base 2 logarithm = lg
Base e logarithm = ln
Base 10 logarithm = log

Factorial of natural numbers less then 20 is computed with standard formula:
5! = 1*2*3*4*5

Factorial of real numbers and natural numbers greater than 19 is gamma function.

You can use sinx instead of sin(x) but it's not recommended because it can affect the result.
For example sinx+2 is sin(x)+2 not sin(x+2).

In function you can use PI and E. PI will be calculated as 3.14159265358979,
and E as 10 raised to the power of that what is after E.
For example: E-05 = 10^(-5)

Caution!

In operation arguments in situations when E symbol is used incorrectly it will be treated as Euler's number (2.71828183).
Thanks to that you can integrate from -E to 2/3*E

Application ignores spaces in formulas.

Application can't compute imaginary numbers. If during computations Numrical Calculator encounter imaginary numbers it will return "not a number" result. 

You can input nested expressions like sin(cos(30)+tg(sqrt(0,4)))</value>
  </data>
  <data name="FunctionForm.lblHeader" xml:space="preserve">
    <value>You can use following functions:</value>
  </data>
  <data name="FunctionForm.lblOperators" xml:space="preserve">
    <value>Operators:  +, -, *, /, ^, !</value>
  </data>
  <data name="functionsToolStripMenuItem" xml:space="preserve">
    <value>Functions</value>
  </data>
  <data name="gbConditions" xml:space="preserve">
    <value>Conditions</value>
  </data>
  <data name="gbDrawFunction" xml:space="preserve">
    <value>Draw</value>
  </data>
  <data name="gbFunction" xml:space="preserve">
    <value>Function</value>
  </data>
  <data name="gbOperation" xml:space="preserve">
    <value>Operation</value>
  </data>
  <data name="gbPoint" xml:space="preserve">
    <value>Point</value>
  </data>
  <data name="gbResult" xml:space="preserve">
    <value>Result</value>
  </data>
  <data name="gbScale" xml:space="preserve">
    <value>Scale</value>
  </data>
  <data name="graphPreviewWhileWindowsScalingToolStripMenuItem" xml:space="preserve">
    <value>Graph preview while window scaling</value>
  </data>
  <data name="graphToolStripMenuItem" xml:space="preserve">
    <value>Graph</value>
  </data>
  <data name="interpolationApproximationToolStripMenuItem" xml:space="preserve">
    <value>Interpolation and approximation</value>
  </data>
  <data name="InterpolationForm" xml:space="preserve">
    <value>Interpolation</value>
  </data>
  <data name="InterpolationForm.btnApply" xml:space="preserve">
    <value>Apply</value>
  </data>
  <data name="InterpolationForm.btnCompute" xml:space="preserve">
    <value>Compute</value>
  </data>
  <data name="InterpolationForm.gbApproximation" xml:space="preserve">
    <value>Approximation</value>
  </data>
  <data name="InterpolationForm.gbInterpolation" xml:space="preserve">
    <value>Interpolation</value>
  </data>
  <data name="InterpolationForm.rbApproximation" xml:space="preserve">
    <value>Approximation level</value>
  </data>
  <data name="InterpolationForm.rbInterpolation" xml:space="preserve">
    <value>Lagrange interpolation</value>
  </data>
  <data name="lblCalculationTime" xml:space="preserve">
    <value>Computation time</value>
  </data>
  <data name="lblCutoff" xml:space="preserve">
    <value>Cut-off threshold</value>
  </data>
  <data name="lblSampling" xml:space="preserve">
    <value>Sampling</value>
  </data>
  <data name="LinearEquationForm" xml:space="preserve">
    <value>Linear equation</value>
  </data>
  <data name="LinearEquationForm.btnCompute" xml:space="preserve">
    <value>Compute</value>
  </data>
  <data name="LinearEquationForm.lblNumberOfVariables" xml:space="preserve">
    <value>Number of variables</value>
  </data>
  <data name="LinearEquationForm.lblResults" xml:space="preserve">
    <value>Result:</value>
  </data>
  <data name="linearEquationToolStripMenuItem" xml:space="preserve">
    <value>Linear equations</value>
  </data>
  <data name="multipleIntegralToolStripMenuItem" xml:space="preserve">
    <value>Multiple integral</value>
  </data>
  <data name="optionsToolStripMenuItem" xml:space="preserve">
    <value>Options</value>
  </data>
  <data name="rbCalculator" xml:space="preserve">
    <value>Calculator</value>
  </data>
  <data name="rbDerivativePoint" xml:space="preserve">
    <value>First derivative</value>
  </data>
  <data name="rbDerivativePointBis" xml:space="preserve">
    <value>Second derivative</value>
  </data>
  <data name="rbDifferential" xml:space="preserve">
    <value>Differential equation</value>
  </data>
  <data name="rbDifferentialII" xml:space="preserve">
    <value>Differential second-order</value>
  </data>
  <data name="rbHybrid" xml:space="preserve">
    <value>Root</value>
  </data>
  <data name="rbIntegral" xml:space="preserve">
    <value>Integral</value>
  </data>
  <data name="rbPoint" xml:space="preserve">
    <value>Value of the function at</value>
  </data>
  <data name="rbSpecialFunction" xml:space="preserve">
    <value>Special function</value>
  </data>
  <data name="languageToolStripMenuItem" xml:space="preserve">
    <value>Language</value>
  </data>
</root>